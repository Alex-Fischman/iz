#match ( ) id
#match { } const
#match [ ] list_or_smth

#affix ;  seq  2 1 0 l
#affix ,  pair 2 1 1 r
#affix =  set  2 1 2 r
#affix :  type 2 1 3 r
#affix -> func 2 1 4 r
#affix ?  if   3 1 5 r

#affix | or  2 1 6 l
#affix & and 2 1 6 l

#affix == eq  2 1 7 l
#affix != neq 2 1 7 l
#affix <  lt  2 1 7 l
#affix >  gt  2 1 7 l
#affix <= lte 2 1 7 l
#affix >= gte 2 1 7 l
#affix !  not 1 0 8 l

#affix + add 2 1 9 l
#affix - sub 2 1 9 l
#affix * mul 2 1 10 l
#affix / div 2 1 10 l
#affix % mod 2 1 10 l
#affix ^ pow 2 1 11 l

#affix . dot  2 1 12 l
#affix $ call 2 1 13 l

add : a -> a -> a;
neg : a -> a;
sub = a -> b -> a + neg$b;

mul : a -> a -> a;
inv : a -> a;
div = a -> b -> a * inv$b;

id = a -> a;
dot = x -> f -> f$x;
const = a -> _ -> a;
seq   = _ -> b -> b;

if : Bool -> a -> a -> a;

out = a?b
      c?d
      e

(1+2*(3+4)/5-6)

"basic string"
"multiline #asdfjlk
string"
"string\twith\n\"escapes\r\\"

# 1-of-1: values
# n-of-1: iters, lists, arrays
# 1-of-n: unions, tagged unions, sum types
# n-of-n: tuples, structs, product types
