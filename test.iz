~ Prelude ~
#operator = 0 2 r =
#operator -> 1 2 r ->

emit(".global main\nmain:\n")
emit("push %rbp\nmov %rsp, %rbp\n")

printnum = x -> {
	x
	emit(".data\nnumfmt: .asciz \"%d \"\n.text\n")
	emit("mov 16(%rbp), %rsi\nlea numfmt(%rip), %rdi\nmov $0, %rax\n")
	emit("call printf\n")
}

return = x -> {x emit("mov %rbp, %rsp\npop %rbp\n")}

#operator + 2 2 l add
add = (x, y) -> {
	x emit("mov %rax, %rcx\n")
	y emit("add %rcx, %rax\n")
}

#operator - 2 2 l sub
sub = (x, y) -> {
	y emit("mov %rax, %rcx\n")
	x emit("sub %rcx, %rax\n")
}

#operator * 3 2 l mul
mul = (x, y) -> {
	x emit("mov %rax, %rcx\n")
	y emit("imul %rcx, %rax\n")
}

#operator / 3 2 l div
div = (x, y) -> {
	x emit("push %rax\n")
	y emit("mov %rax, %rcx\npop %rax\n")
	emit("cdq\nidiv %rcx\n")
}

~ Test Program ~
a = 3 - 2 + (4 / 2 * 3 - 5 + 3 * 2) ~~ 8
b = a * 3
b = 48 * b ~~ 1152
c = 5

func = (x, y) -> {
	temp = x * y
	printnum(temp)
	1 + temp
}

applyTwice = (f, x) -> f(f(x))

square = x -> x * x

print10 = () -> printnum(10)

#operator ++ 4 1 r incr
incr = x -> x + 1

printnum(c)
printnum(func(2, 3))
printnum(applyTwice(x -> x + 3, 2))
printnum(square(3))
print10()
printnum(++ 10)
printnum(a + 4)
printnum(b)

return(0)
