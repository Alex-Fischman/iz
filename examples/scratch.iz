fib := n -> if (n == 0) 1 else fib@(n-1) + n

# Data : Const@Int -> Type
Int : Type = Data@8

Bool := Data@1
true  : Bool = 1
false : Bool = 0
# if   : Bool     -> a -> Option@a
# else : Option@a -> a -> a
or  := a -> b -> if a true else b
and := a -> b -> if a b    else false

# Struct : [Type] -> Type
Token := Struct@[String Int Int]
str : Token -> _ = access@0
col : Token -> _ = access@1
row : Token -> _ = access@2

# Enum : [Type] -> Type
AST := Enum@[
	Token
	List := Struct@[Token [AST] Token]
	Call := Struct@[AST AST]
]

# fmt : Const@String -> f where (f : _ -> f or f : String)
toString : Token -> String = fmt@"{}@{}:{}"@token.str@token.row@token.col
