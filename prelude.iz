#operator = 0 2 r =
#operator -> 1 2 r ->

emit(".global main\nmain:\n")
emit("push %rbp\nmov %rsp, %rbp\n")

printnum = x -> {
	x
	emit(".data\nnumfmt: .asciz \"%d \"\n.text\n")
	emit("mov 16(%rbp), %rsi\nlea numfmt(%rip), %rdi\nmov $0, %rax\n")
	emit("call printf\n")
}

return = x -> {x emit("mov %rbp, %rsp\npop %rbp\n")}

#operator + 2 2 l add
add = (x, y) -> {
	x emit("mov %rax, %rcx\n")
	y emit("add %rcx, %rax\n")
}

#operator - 2 2 l sub
sub = (x, y) -> {
	x emit("mov %rax, %rcx\n")
	y emit("sub %rax, %rcx\n")
	emit("mov %rcx, %rax\n")
}

#operator * 3 2 l mul
mul = (x, y) -> {
	x emit("mov %rax, %rcx\n")
	y emit("imul %rcx, %rax\n")
}

#operator / 3 2 l div
div = (x, y) -> {
	x emit("push %rax\n")
	y emit("mov %rax, %rcx\npop %rax\n")
	emit("cdq\nidiv %rcx\n")
}
