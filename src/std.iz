#op . dot 15 left
dot = x -> f -> f@x

#op || or  7 left
#op && and 8 left
or  = a -> b -> if a true else b
and = a -> b -> if a b else false

#op ! not 14 prefix
not = b -> if b false else true

#op != ne 9 left
#op >= ge 9 left
#op <= le 9 left
ne = a -> b -> not@(a == b)
ge = a -> b -> a > b || a == b
le = a -> b -> a < b || a == b

#op - neg 14 prefix
neg = x -> 0 - x

id = x -> x
square = x -> x * x
factorial = n -> if n <= 1 1 else n * factorial@(n - 1)

map = f -> l -> if (x::xs = l) f@x :: xs.map@f else []
get = i -> l -> if (x::xs = l) (if i == 0 Some@x else xs.get@(i - 1)) else None
