#op dot 15 l _ . _
dot = x -> f -> f@x

#op or  7 l _ || _
#op and 8 l _ && _
or  = a -> b -> if a true else b
and = a -> b -> if a b else false

#op not 14 p ! _
not = b -> if b false else true

#op ne 9 l _ != _
#op ge 9 l _ >= _
#op le 9 l _ <= _
ne = a -> b -> not@(a == b)
ge = a -> b -> a > b || a == b
le = a -> b -> a < b || a == b

#op neg 14 p - _
neg = x -> 0 - x

map = f -> l -> if (x::xs = l) f@x :: xs.map@f else []
get = i -> l -> if (x::xs = l) (if i == 0 Some@x else xs.get@(i - 1)) else None
